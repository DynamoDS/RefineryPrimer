<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhythmCore</name>
    </assembly>
    <members>
        <member name="T:Rhythm.About.About">
            <summary>
            Wrapper for about class.
            </summary>
        </member>
        <member name="M:Rhythm.About.About.AboutRhythm">
            <summary>
            This is mostly to show the icon in the Dynamo 2.0 library.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rhythm.Helpers.Helpers">
            <summary>
            Wrapper Class for Helpers
            </summary>
        </member>
        <member name="M:Rhythm.Helpers.Helpers.Toggle(System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            This provides a toggle based on boolean input. Replacement for Rhythm.Toggle.
            </summary>
            <param name="obj">The object to passthrough.</param>
            <param name="toggle">Toggle the passthrough.</param>
            <returns name = "result">The object.</returns>
        </member>
        <member name="M:Rhythm.Helpers.Helpers.ThisOrThat(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object},System.Boolean)">
            <summary>
            This provides a toggle input to select between 2 inputs.
            </summary>
            <param name="obj1">First choice.</param>
            <param name="obj2">Second choice.</param>
            <param name="toggle">True for option 1, false for option 2.</param>
            <returns name = "result">The object.</returns>
        </member>
        <member name="T:Rhythm.Helpers.ImportExport">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rhythm.Helpers.ImportExport.ScreenshotMainWindow(System.String)">
            <summary>
            Creates a full screenshot of the main window.
            </summary>
            <param name="filepath">The image filepath</param>
        </member>
        <member name="T:Rhythm.Helpers.System">
            <summary>
            Wrapper class for system stuff
            </summary>
        </member>
        <member name="M:Rhythm.Helpers.System.CurrentUserTempFolder(System.Boolean)">
            <summary>
            This returns the temporary path for the current user.
            </summary>
            <param name="refresh">Optional toggle to refresh the node</param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Helpers.System.CurrentUserAppData(System.Boolean)">
            <summary>
            This returns the appdata path for the current user.
            </summary>
            <param name="refresh">Optional toggle to refresh the node</param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Helpers.System.CurrentUserDomainName(System.Boolean)">
            <summary>
            Returns the domain name of the current user.
            </summary>
            <param name="refresh">Optional toggle to refresh the node</param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Helpers.System.SendToClipboard(System.String)">
            <summary>
            Send the given string to the clipboard
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Rhythm.Helpers.System.CurrentUserName(System.Boolean)">
            <summary>
            Returns the current windows user.
            </summary>
            <param name="refresh">Optional toggle to refresh the node</param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Helpers.System.JiggleMouse(System.Boolean,System.Double)">
            <summary>
            This will move your mouse back and forth slowly while periodic run is on.
            </summary>
            <param name="runIt">True will cause the mouse to move on it's own.</param>
            <param name="interval">Time between movements (in seconds).</param>
        </member>
        <member name="T:Rhythm.Numbers.Numbers">
            <summary>
            Wrapper class for numbers
            </summary>
        </member>
        <member name="M:Rhythm.Numbers.Numbers.ToWords(System.Int32,System.String)">
            <summary>
            Convert the input numbers into words. Only considers whole numbers (integers).
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="number"></param>
            <param name="locale">This offers the option to override the locale of the words.
            By default it uses your computer's locale, you can override this with the list here. https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c?redirectedfrom=MSDN</param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Numbers.Numbers.ToOrdinalWords(System.Int32,System.String)">
            <summary>
            Convert the input numbers into ordinal words. Only considers whole numbers (integers) (Eg. 1 becomes 1st).
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="number"></param>
            <param name="locale">This offers the option to override the locale of the words.
            By default it uses your computer's locale, you can override this with the list here. https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c?redirectedfrom=MSDN</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Rhythm.Numbers.Numbers.ToRoman(System.Int32)" -->
        <member name="M:Rhythm.Numbers.Numbers.ToHeading(System.Double,System.Boolean)">
            <summary>
            Convert the input numbers into headings: N,S,E,W or north, east, south or west.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="number"></param>
            <param name="fullHeading"></param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.Numbers.Numbers.ToHeadingArrow(System.Double)">
            <summary>
            Convert the input numbers into headings: ↑, →, ↓, ←.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="T:Rhythm.String.Modify">
            <summary>
            Wrapper class for string modifiers
            </summary>
        </member>
        <member name="M:Rhythm.String.Modify.ToTitle(System.String)">
            <summary>
            Converts the input string to a title case.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rhythm.String.Modify.ToQuantity(System.String,System.Int32)">
            <summary>
            This will attempt to return a quantity, given a string and count.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to convert to quantity.</param>
            <param name="quantity">The amount of things.</param>
            <returns name="quantityString">The formatted quantity.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Truncate(System.String,System.Int32,System.String)">
            <summary>
            This will truncate the given string, byt the given length. (Eg."Long text to truncate", with 10, becomes Long text…") 
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to truncate.</param>
            <param name="length">The target length of the string.</param>
            <param name="truncationString">The characters to fill in the string with.</param>
            <returns name="truncatedString">The truncated string.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Pluralize(System.String)">
            <summary>
            This will attempt to return a plural version of a word.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to pluralize.</param>
            <returns name="pluralString">The string in it's plural form.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Singularize(System.String)">
            <summary>
            This will attempt to return a singular version of a word.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to singularize.</param>
            <returns name="singularString">The string in it's singular form.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Titleize(System.String)">
            <summary>
            Titleize converts the input words to Title casing
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to titleize.</param>
            <returns name="str">The string in it's title form.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Pascalize(System.String)">
            <summary>
            Pascalize converts the input words to UpperCamelCase, also removing underscores and spaces. (Eg. SomeTitleForSomething)
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to Pascalize.</param>
            <returns name="str">The string in it's pascal case form.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Camelize(System.String)">
            <summary>
            Camelize behaves identically to Pascalize, except that the first character is lower case. (Eg. someTitleForSomething)
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to Camelize.</param>
            <returns name="str">The string in it's camel case form.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Underscore(System.String)">
            <summary>
            Underscore separates the input words with underscore. (Eg. some_title)
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to convert to underscore separated.</param>
            <returns name="str">The resulting words separated with underscores.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Dasherize(System.String)">
            <summary>
            Underscore separates the input words with a dash. (Eg. Some-Title)
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to convert to dash separated.</param>
            <returns name="str">The resulting words separated with dashes.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.Humanize(System.Object)">
            <summary>
            Humanize string extensions allow you turn an otherwise computerized string into a more readable human-friendly one.
            "Underscored_input_string_is_turned_into_sentence." becomes "Underscored input string is turned into sentence"
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="obj">The string to human understandable form.</param>
            <returns name="str">The humanized string.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.FormatWith(System.String,System.Object[])">
            <summary>
            Format input string with arguments.
            Made possible with Humanizer (https://github.com/Humanizr/Humanizer)
            </summary>
            <param name="str">The string to format.</param>
            <param name="args">The params (objects)</param>
            <returns name="str">The formatted string.</returns>
        </member>
        <member name="M:Rhythm.String.Modify.MOcKtExt(System.String)">
            <summary>
            This generates a "mocking text" case. Just for fun. 😀
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
    </members>
</doc>
