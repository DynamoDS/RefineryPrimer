{"license":"MIT","file_hash":null,"name":"spring nodes","version":"210.1.1","description":"Spring Nodes focuses on enhancing Dynamo's interaction with Revit and exploring any means that can help accelerate BIM work-flows. Your recommendations and ideas on how to improve things are always welcome. For more information and sample files, be sure to check out the repository:\r\nhttps://github.com/dimven/SpringNodes\r\ntwitter: @5devene\r\n\r\nPlease report any issues directly to the GitHub repository.\r\n","group":"Springs","keywords":["springs","spring","api","revit","design","script","bad","monkeys","reope"],"dependencies":[],"contents":"ꟿ Application.OpenViews - Lists all views currently open inside the Revit UI, ꟿ AreaPlan.ByLevelName - Creates an area plan at the designated levels. Each new view needs a name. An area scheme must first be activated before it can be used. To activate a scheme, place one view of that type in the project(you can then delete it).  If a view with the same scheme and name exists, you'll get a null instead., ꟿ Beams.FixExtents - Detects all beams from the input list with broken extents(actual length - cut length <  margin) and attemts to correct them., ꟿ BoundingBox.2dRectangle - Returns a 2d rectangle from a bounding box, ꟿ BoundingBox.MidPoint - Fetches the mid point of the bounding box., ꟿ BoundingBox.Scale - Scales the bounding box in three dimensions according to it's center., ꟿ BoundingBox.ScaleByDistance - Scales the bounding box by a fixed distance., ꟿ BrepShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  Works only in Revit 2017 and later. Uses the more advanced BrepBuilder. It supports solids or surfaces, however periodic faces like spheres, cylinders and cones are not supported. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category and material for all geometries or a unique one for each geometry - the node's lacing is set to longest by default. The default category is Generic Model., ꟿ ClosedCurve.Offset+ - Offsets a curve both ways and correctly differenciates the external and internal offset. If an offset goes beyond the curve's bounds, the result will fail and a null value will be appended instead. Also works for convex curves like arcs., ꟿ Collect.AllElementsOf - Works with either categories or types and uses multi-filters to get multiple groups with a single query. Can be applied as a function. No ties to the Document.Changed event., ꟿ Collect.AllTypesOf - Works with either categories, element types or revit classes and uses multi-filters to get multiple groups with a single query. Can be applied as a function. No ties to the Document.Changed event., ꟿ Collect.CurrentSelection - Gets the currently selected elements. Connect a boolean switch to refresh the selection., ꟿ Collect.ElementsInView - Selects all elements visible in the input view., ꟿ Collect.ElementSketch - Get the actual sketch lines of a sketch based element (floor, ceiling, modified wall, etc.) . You can optionally fetch the matching model curves, however this might prove comptationally heavy on larger data sets. Does not work with elements from linked files., ꟿ Collect.LinkedInstanceElements - Extract elements by category from the selected linked instances. The transform CS can be used to get the exact location of the elements in the host file. If an error occurs or the linked document is unloaded, an error will be returned in the elements output and the appropriate transform will be a null. You can use those nulls to filter out the errors., ꟿ Collect.Revisions - Collects all revision clouds from a specific date., ꟿ Collect.Sheets - Search for sheets by either their name or their number. Use a false boolean switch to search by number., ꟿ Collect.View3DTemplates - Gets all 3d view templates and returns them to Dynamo as generic Elements, ꟿ Collect.Views - Search for views based on naming. You can choose to either include or exclude schedules. Use the sheet collector for sheets., ꟿ Color.ToDecimal - Converts a Dynamo colour its Revit equivalent  decimal value., ꟿ Curve.Offset+ - Offsets a curve towards the specified point, ꟿ CurveLoop.Simplify - Attempts to simplify an open or a closed curve loop by connecting straight separate line segments into a single line., ꟿ Decimal.ToColor - Converts a revit colour decimal value to its Dynamo equivalent., ꟿ Delaunay2D.ByPoints - Create a delaunay triangulation of a set of planar points. You can get the result as points or as lines., ꟿ Dictionary.ByKeysValues - Dictionaries are an incredibly powerful tool for making associative sets between two equal length lists. The first list must be of unique strings (or numbers) and will be the key and the second list will be the matching values (it can be made up of geometry, elements, even other lists)\r\nThe search keys list will provide the corresponding value to the input key., ꟿ DirectShape.ByGeometry - Convert the input geometry to DirectShape element inside the Revit document.  It supports solids or surfaces. It is based on an alternative process that uses a SAT import and can produce smooth surfaces. Each created DS will have a unique type. Make sure that each input geometry has a unique name. You can either feed a single category for all geometries or a unique category for each geometry - the node's lacing is set to longest by default. The default category is \r\nGeneric Models., ꟿ DirectShape.Transform - Transforms the typed DirectShape element from the identity coordinate system to the input coordinate system(s), in a manner similar to Dynamo's Geometry.Transform node., ꟿ DirectShape.Translate - Copy the input DirectShape element with the help of a translation vector, similarly to the Geometry.Translate node. This method should prove more efficient than Element.Copy, ꟿ Document.ActiveView - Selects the current document's active view. Supports more view types than the built-in option.\r\nWill be depreciated once the bult in node works with all plan types., ꟿ Document.CentralPath - If the document is workshared, the node returns the path to the central document as a string. Otherwise a null value will be returned., ꟿ Document.CopyFromLinkInstance - The node will use the total transformation of the link instance to copy the input elements into the local document., ꟿ Document.CopyFromViewToView - The node will copy the input (view based) elements from the source view into the destination view., ꟿ Document.DeleteElements - Attempts to delete the input list of elements from the active Revit document.The node returns the number of successfully deleted elements and their Ids as a string. Carefully observe the deleted elements count. It may be greater than the input list because hosted elements or tags will be deleted as well. If an element in the list can not be deleted (for example last revision or last view), the whole list will fail to be deleted., ꟿ Element.GetParameterUnitValue - Converts from internal units to the currently set Revit display units. Useful only for parameters with numeric values. If no Value is found, will return a blank string., ꟿ Element.IsCut - Tests if the element is being cut by any void instances. If any cuts exist all cutting elements will be provided., ꟿ Element.IsCutting - Tests if the input element (or elements) is a void cut and if it is cutting any elements. In such cases, the cut elements will be provided., ꟿ Element.MeshGeometry - Reads an element's geometry and converts it to either a Dynamo mesh or a toolkit mesh representation.  The node will return Dynamo meshes by default.\r\n\r\nThe LOD input represents the triangulation factor. Its range is from 0 to 1. 0 is the lowest level of detail and 1 is the highest. It's set to 0 by default., ꟿ Element.RemoveVoidCut - Removes the void cut between the input elements, if such exists., ꟿ Element.SetLocation - Attempts to modify the location of the input element. This can effectively add as a move comand in Revit. Works for both line based and point based elements., ꟿ Element.SetParameterToNone - Used to set parameters such as View Template, Phase Demolished or Top Constraint to None / Unconstrained., ꟿ Element.Unjoin - Unjoins the element(s) in the second list from the primary input element., ꟿ Elements.GroupByDistance - You'll need two equal length lists of geometry objects and elements. Splits the list of elements into groups if the distance between the coresponding geometry is less than the provided margin., ꟿ ElementType.AdaptiveBySimpleGeometry - Genearate a new eight point adaptive component family type from any solid or polysurface consisting of planar faces. Faces with openigs are not supported., ꟿ ElementType.Duplicate - Create duplicate element types. If the type exists, it will be appended instead., ꟿ ElementType.Instances - Fetches all instances of the input element type, ꟿ FamilyInstance.ByFaceAndPoint - Places instances on the input face oriented to the face's U tangent and the global Z axis., ꟿ FamilyInstance.ByGeometry - You must provide a valid family template path that will be used for all input geometry objects. The project units(and not the templates) will be used to determine the size of the output geometry.\r\nThe provided category will be used only if the family template supports it. If not, the default template category will be used instead.\r\nLikewise, the family material(provided as a string) will be set only if a material with that name exists in the template. If not, the default material will be used instead (\"By Category\").\r\nFor void cuts, the material settings will be ignored.\r\nThe Subcategory name is an optional input. If you'd like to skip assigning a Subcategory to any new instance, simply use null.\r\nThe node expects a unique family name for each geometry object. The rest of the input lists will be processed as if the node lacing is set to longest., ꟿ FamilyInstance.ByHostAndPoint - Creates hosted family instances(doors/windows) at the specified points. You can feed either a single family type or a unique type for each instance., ꟿ FamilyInstance.ByPointsLevelsBatch - This node batch ceates level hosted family instances. You can feed either a single type/level that will be used for all instances or a unique type/level for each instance. Set track to false if you'd like to place instances on every run., ꟿ FamilyInstance.ByViewAndPoint - Places a view hosted family instance at a given point in the view (e.g. a detail component, 2d annotation).\r\nSet track to false if you'd like to place instances on every run., ꟿ FamilyTemplatePaths.CommonPaths - Fetches the default family template paths, ꟿ Feet.ToFraction - Converts a decimal foot value to a fractional foot/inch string., ꟿ FilePath.CanWriteTo - Checks if the user and application has write access to the specified path's directory, ꟿ FilePath.Size - Outputs the the file size in kilobytes or megabytes. Provide a file path as a string. Set kbOnly to true for a consistent output., ꟿ FilledRegion.ByCurves+ - Fully utilizes the FilledRegion.Create api method, unlike the OOTB node. You must provide a list with sublist of curve loops., ꟿ Form.ByGeometry - Convert the input geometry to a Revit Form object. Forms can exist only in the family environment. You can convert complicated solids or surfaces directly into forms. A form can act as a void. Provide either one true boolean value to convert a form into a void. The node's lacing is set to longest by default., ꟿ Fraction.ToFeet - Converts a fractioned feet /inch string value into a decimal foot value., ꟿ Geometry.BoxedDistanceTo - Computes the minimal distance between the axis-aligned bounding boxes of two geometry elements. Works directly with a bounding box input., ꟿ Geometry.DifferentiateDisplay - Paints the input geometry using the default color range. Also works well with lists of geometry., ꟿ Geometry.Extents - Gets the dimensions of the geometry's bounding box., ꟿ Geometry.GroupByDistance - Splits the list of geometry elements into groups if the distance between them is less than the provided margin., ꟿ Geometry.IndexByDistance - Provides the index of the closest or farthest geometry. Should prove faster than getting the geometry and finding its index in two separate operations., ꟿ Geometry.ReadTag - Design script geometry can store a <string, object> dictionary for the duration of the active graph. If no parameter with the active name is found, a null value will be returned instead., ꟿ Geometry.SplitRecursively - Splits a surface or a solid recursively, using the resulting reduced geometry for every consecutive split. Select a point or another geometry to control the direction of the split., ꟿ Geometry.WriteTag - Design script geometry can store a <string, object> dictionary for the duration of the active graph. You can store a name/value pair and retrieve it further down the graph., ꟿ Line.IsInPlane - Checks if a line lies in a given plane, ꟿ Line.StraightenXY - Checks a line's end points for irregularities and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., ꟿ Line.StraightenZ - Checks a line's end points for irregularities in  the Z axis and corrects them if they are at or below the specified margin. The default margin is 1/5000 of the curve length, which is conservative., ꟿ Line.ToString - Serilize a line to a string. You can use a custom delimier  between the coordinates and apply an optional rounding. Works great with Revit text based parameters or Excel., ꟿ Line.XYOffset - Offsets a line in the XY plane toards the specified point, ꟿ LineLoop.Merge - Attempts to join lines into a single chain of joined curves. The node returns the new lines as a chain and with the original order. The success outputs returns the success of the execution as a true/false boolean., ꟿ List.DragDropReorder - Press and hold on an item to move it up or down the list. To confirm and close the window, select \"Save Order\". The optional names input will override the object representation., ꟿ List.DropDown - Selects one list item by a drop-down combo box. The optional names input will override the object representation., ꟿ List.DropFirstLast - Removes the first and last items from the list, ꟿ List.EveryOther - Useful for when you want to combine an item on the list with every other item on the list. For example in list {1,2,3} , \"2\" will be paired up only with \"1\" and \"3\" and will not be paired up with itself., ꟿ List.FilterByCategoryName - Filters the input elements by their category name. You can input multiple category names., ꟿ List.FilterByClassName - Filters a list of objects by the object's class name. Note that Dynamo elements belong to different classes than their Revit counterparts. Use the Object.Class node to check an object's class., ꟿ List.FilterBySelection - Check the items that you'd like to filter in.  Unchecked items will be sent to the out list. The optional names input will override the object representation., ꟿ List.FirstLast - Simple utility node to get both the first and last items of a list as separate outputs. This avoids the unnecessary sublist when using the List.Deconstruct node., ꟿ List.GetEvenOdd - Gets the even and odd indices from the list., ꟿ List.ItemAtIndex+ - Identical to the built in node but works with negative indices, ꟿ List.MaxIndex - Gets the maximum index of a list. Good for use with floating point values, ꟿ List.MergeByBoolMask - Merge two lists by a boolean mask list. The true count in the mask should be the same as the length of the true list and vice versa for the false list., ꟿ List.MinIndex - Gets the minimum index of a list. Good for use with floating point values, ꟿ List.NullAllIndicesOf - list all of the indices of a list that match the specified value. Capable of handling null values, part of the SmartCopyMonitor workflow., ꟿ List.NullIndexOf - Similar to the bult-in node but provides a null value instead of -1 of failure. Part of the SmartCopyMonitor workflow., ꟿ List.NullReorder - Simiar to the built-in function with the difference that it can handle null indices. Part of the SmartCopyMonitor workflow., ꟿ List.NullSetDifference - Similar to the built in node, with a built-in safety for null values. Part of the SmartCopyMonitor workflow., ꟿ List.RandomiseDivide - Shiffles the input list and divides it into sub-lists based on ratios(1/4 + 1/2 + 1/4 will give you three lists split accordingly) The smalest ratio will always be 1 / the list length and the largest ratio will be 1. A seed input can shuffle the list further., ꟿ List.Split - Splits a list at the desired length, ꟿ List.Subpairs - Pair up each list item with the next one., ꟿ List.SubpairsWrapped - Wrap the list and pair up each list item with the next one., ꟿ List.ToString - Serializes a (nested) list or dictionary of basic objects into a valid design script syntax string., ꟿ Math.Median - Calculate a median value from a list of numbers, ꟿ Mesh.BoundingBox - Get the bounding box of a mesh. Works with both built-in meshes and toolkit meshes, ꟿ Mesh.ToPolySurface - Converts a Dynamo mesh to a polysurface. By default the node is single threaded, but if you specify a higher number of threads in the `NUMTHREAD` input, the node will run multi-threaded to speed up the conversion.\r\n\r\n*WARNING* Using multi-threaded code with Dynamo's geometry kernel may crash Revit in some cases., ꟿ Mesh.ToTkMesh - Converts a Dynamo mesh to a toolkit mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., ꟿ Mesh.VolumeArea - Gets the volume and the area of a mesh. Works with both built in meshes and toolkit meshes. Based on math from geometry3sharp.\r\n\r\nNote that if triangles don't define closed region, volume is probably nonsense., ꟿ N-hedron.ByOriginVector - Creates a multi-sided poyhedron with defined side length and total height., ꟿ Number.AlmostEqual - Checks if a number is almost equal to a value with a specified tollerance., ꟿ Number.ToString - Converts the input number(s) to string. You can optionally limit the number of digits., ꟿ Opening.InFloorByCurves - Create hosted floor opeinngs through the input floors. The second input is a list of sub-lists of the boundary curves., ꟿ Opening.ShaftByCurves - Creates a shaft opening. The top level MUST be higher than the base level for a successful execution. You can either provide one base and top level for all shafts or have unique levels for each shaft instance., ꟿ Parse.ErrorReport - Process a Revit error report (HTML file) and extract the error types, all affected elements and the total number of errors. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., ꟿ Parse.InterferenceCheck - Process a Revit interference check (HTML file) and extract the interference categories, all affected elements and the total number of clashes. If you are executing from a document different than the one the error report belongs to, be sure to set \"fetch_elements\" to false., ꟿ PlanarFace.FixDomain - Corrects the surface domain of a 3 or 4 point planar face extracted from Revit., ꟿ Point.BoxedDistanceTo - Computes the minimal distance between a point and the axis-aligned bounding boxe of a geometry element. Works directly with a bounding box input for the geometry., ꟿ Point.PullOntoPlane - Pulls (projects) the point onto the input plane, following the plane normal., ꟿ Point.ToString - Serilize a point to a string. You can use a custom delimier  between the coordinates and apply an optional rounding. Works great with Revit text based parameters or Excel., ꟿ Points.ConvexHull2D - Computes the XY convex hull of a given set of points based on the monotone chain algorithm., ꟿ Points.MinAreaRectangle - Computes the minimum area rectangle in xy space for a set of points using a linear time algorithm, ꟿ Points.PruneDuplicates+ - An alternative to the built in node, that performs faster at the price of loosing the order of the points. All floating point valies are rounded to the nearest 4 decimal points. You can optionally remove duplicate Z values by setting \"keepDuplicateZ\" to false., ꟿ PolyCurve.ArcChamfer - Symmetrically chamfers the corners of the polycurve by the designated distance and close with tangent arcs., ꟿ PolyCurve.Chamfer - Symmetrically chamfers the corners of the polycurve by the designated distance, ꟿ PolyCurve.Fillet+ - Fillet a polycurve in its plane. Unlike the built in node, this works in both in the CW and the CCW direction., ꟿ PolyCurve.Points - Gets all the unique start and end points of the underlying curves in a sorted list., ꟿ Polygon.2DArea - Returns the planar area of the input polygon(s). Not accurate for self-intersecting polys., ꟿ Polygon.3DArea - Returns the planar area of the input polygon(s) in euclidean space. Not accurate for self-intersecting polys., ꟿ Polygon.ContainmentTest+ - A less accurate method that should perform faster than the built-in node for large data sets., ꟿ Polygon.IsRectangular - Determines if a polygon (or a polycurve) is rectangular or square. If you want to differenciate between square and rectangular polys, use the XOR output., ꟿ Process.EmptyWorkingSet - Use at your own risk! Removes as many pages as possible from the working set of the active Revit session., ꟿ Quads.ByPointMatrix - Creates a CCW or CW list of quad pairs from a rectangular nested list of points., ꟿ RelativeLevel.AtHeight - Select the level closest to the input height from the list of input levels, ꟿ RevitLinkType.IsLoaded - Checks if a rvt link is loaded, ꟿ ScopeBox.Geometry - Fetches the base curve and solid representation of a scope box element., ꟿ SelectElementsInOrder - Select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., ꟿ SelectFaces+ - Select multiple faces from inside the Revit UI. Be sure to press \"Finish\" once done. Unlike the built-in node, face references of instances will be added sucessfully and you'l get the pick points. You can use a Boolean toggle to refresh your selection., ꟿ SelectInRevit - Selects the input elements inside the Revit UI., ꟿ SelectLinkedElement - Select the linked instance first, followed by the element. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., ꟿ SelectLinkedElementsInOrder - Select the linked instance first. Then select multiple elements from the Revit document in the desired order. Hit ESC to stop picking. To refresh the node, connect a boolean switch node., ꟿ SelectLinkedElements - Select the linked instance first, followed by the elements. To finish the selection, press Finish. If your selection fails, just press escape or Cancel.\r\nTo refresh the node, connect a boolean switch node., ꟿ SelectLinkedFace - Select the linked instance first, followed by the face. The face will be transformed to the host file's coordinate system. If your selection fails, just press escape.\r\nTo refresh the node, connect a boolean switch node., ꟿ Sheet.Views+ - Extracts all views and schedules (minus the revision schedule) placed on the input sheet (or sheets).\r\nWill be depreciated once the bult in node works with all plan types., ꟿ Star.ByCenterRadiusRays - Fun little node to create star shapes., ꟿ String.ReplaceIllegalChars - Replaces all characters in a string that are found in a commonly known list of illegal characters, ꟿ String.RightSplitOnce - Gets the tail of a string, ꟿ String.ToLine - De-serilize a Revit parameter string into a geometric line., ꟿ String.ToPoint - De-serilize a Revit parameter string into a geometric point., ꟿ Surface.OuterPerimeterCurves - Get only the outer perimeter of a surface, dropping  the inner openings., ꟿ Surface.TrimWithLoopsFix - A temporary replacement for the broken built-in node. For best results, make sure the loops are convex., ꟿ TextNote.ByPoint - Places a text note at a given point in the view. View, text type and content can either be a single item for all points or the same length as the number of points.\r\nSet track to false if you'd like to place notes on every run., ꟿ tkMesh.ByPolygon - Converts a closed polygon into a toolkit mesh using an ear-clipping division, ꟿ tkMesh.DifferentiateDisplay - Paints the input toolkit meshes using the default color range. Works well with lists of meshes., ꟿ TkMesh.Flatten - Sets the Z coordinate of each vertex of the mesh to the desired value., ꟿ TkMesh.Merge - Creates a single mesh entity from a list of toolkit meshes., ꟿ TkMesh.Thicken - Thickens a surface mesh in the provided direction and by the supplied distance., ꟿ TkMesh.ToMesh - Attempts to convert a toolkit mesh to a Dynamo mesh. You obviously need to have the appropriate version of the mesh toolkit package downloaded first., ꟿ Utility.Announce - Uses the standard windows speech synthesiser to make an announcement when the note gets executed. Useful when placed after a long running task., ꟿ Utility.GetData - Using the application's app domain, this node will try to fetch any data stored under the specified name. You'll need to first store the data with the `Utility.SetData` node., ꟿ Utility.SetData - Using the application's app domain, this node will store a reference to the input data under the specified name. use the `Utility.GetData` node to retrieve the data somewhere else.\r\n\r\nTry not to store large ammounts of data, because you risk creating a memory leak that will persist till you close down the aplication., ꟿ ViewSet.ByViewsName - Creates a set of views(or sheets) for printing. If the set exists, set Overwrite to true to replace it., ꟿ Voronoi2D.ByPoints - Create a voronoi tessellation of a set of planar points. The cell lines will be culled to the bounding extent of the points., ꟿ Wall.IsCurtainWall - Returns true if the wall is a curtain wall., ꟿ WatchDialog - This node that serializes the input information and presents it in a resizable text window.","engine_version":"2.0.4.12685","engine":"dynamo","engine_metadata":"","site_url":"http://dynamonodes.com/2016/01/28/spring-nodes-node-index/","repository_url":"https://github.com/dimven/SpringNodes","contains_binaries":false,"node_libraries":[]}